{"version":3,"sources":["ResizeButton.js","Window.js","InputArea.js","MarkedArea.js","initialMarked.md","index.js"],"names":["ResizeButton","props","onClick","event","changeVisibility","changeWindowSize","className","icon","Window","useState","windowSizeIsSmall","setWindowSize","id","ref","requestingWindow","titleName","showPath","faExpandArrowsAlt","faCompressArrowsAlt","windowContent","InputArea","onChange","handleInput","value","input","MarkedArea","dangerouslySetInnerHTML","__html","markedText","App","setInput","setMarkedText","windowClassName","setWindowClassName","visibility","setVisibility","useRef","markText","text","dirtyInput","marked","cleanedInput","DOMPurify","sanitize","current","currentTarget","parentNode","console","log","useEffect","fetch","file","then","result","target","setOptions","highlight","code","hljs","highlightAuto","breaks","ReactDOM","render","document","getElementById"],"mappings":"gQAeeA,MAbf,SAAsBC,GAMpB,OACE,wBAAQC,QANM,SAACC,GACfF,EAAMG,iBAAiBD,GACvBF,EAAMI,oBAIoBC,UAAU,eAApC,SACE,cAAC,IAAD,CAAiBC,KAAMN,EAAMM,UCoBpBC,MAvBf,SAAgBP,GACd,MAA2CQ,oBAAS,GAApD,mBAAOC,EAAP,KAA0BC,EAA1B,KAMA,OACE,sBAAKL,UAAWL,EAAMK,UAAWM,GAAIX,EAAMW,GAAIC,IAAKZ,EAAMa,iBAA1D,UACE,sBAAKR,UAAU,YAAf,UACE,4BAAIL,EAAMc,YACV,cAAC,EAAD,CACEX,iBAAkBH,EAAMG,iBACxBY,SAAUf,EAAMe,SAChBT,KAAMG,EAAoBO,IAAoBC,IAC9Cb,iBAZR,WACEM,GAAeD,SAcb,qBAAKJ,UAAU,gBAAf,SAAgCL,EAAMkB,oBCd7BC,MAXf,SAAmBnB,GACjB,OACE,0BACEW,GAAG,SACHN,UAAU,8BACVe,SAAUpB,EAAMqB,YAChBC,MAAOtB,EAAMuB,SCIJC,MAVf,SAAoBxB,GAClB,OACE,qBACEW,GAAG,UACHN,UAAU,+BACVoB,wBAAyB,CAAEC,OAAQ1B,EAAM2B,eCLhC,MAA0B,yC,wBCmBzC,SAASC,IACP,MAA0BpB,mBAAS,IAAnC,mBAAOe,EAAP,KAAcM,EAAd,KACA,EAAoCrB,mBAAS,MAA7C,mBAAOmB,EAAP,KAAmBG,EAAnB,KACA,EAA8CtB,mBAAS,UAAvD,mBAAOuB,EAAP,KAAwBC,EAAxB,KACA,EAAoCxB,oBAAS,GAA7C,mBAAOyB,EAAP,KAAmBC,EAAnB,KAEMrB,EAAmBsB,iBAAO,MAOhC,SAASC,EAASC,GAChB,IAAMC,EAAaC,IAAOF,GACpBG,EAAeC,IAAUC,SAASJ,GACxCR,EAAcU,GAGhB,IAAMrC,EAAmB,SAACD,GACxBgC,GAAeD,GACfpB,EAAiB8B,QAAUzC,EAAM0C,cAAcC,WAAWA,WAC1DC,QAAQC,IAAIlC,EAAiB8B,SAC7BX,EAAmBC,EAAa,YAAc,WAiBhD,OAdAe,qBAAU,WACRC,MAAMC,GACHC,MAAK,SAACC,GAAD,OAAYA,EAAOf,UACxBc,MAAK,SAACd,GACLR,EAASQ,GACTD,EAASC,QAEZ,IAEHW,qBAAU,WACRF,QAAQC,IAAIlC,EAAiB8B,QAAQhC,IAChCsB,IAAYpB,EAAiB8B,QAAQtC,UAAY,mBACrD,CAAC4B,IAGF,sBAAK5B,UAAU,cAAf,UACE,cAAC,EAAD,CACEQ,iBAAkBA,EAClBR,UAAW0B,EACX5B,iBAAkBA,EAClBW,UAAU,oBACVI,cAAe,cAAC,EAAD,CAAWK,MAAOA,EAAOF,YAvC9C,SAAqBnB,GACnB2B,EAAS3B,EAAMmD,OAAO/B,OACtBc,EAASlC,EAAMmD,OAAO/B,YAuCpB,cAAC,EAAD,CACET,iBAAkBA,EAClBR,UAAW0B,EACX5B,iBAAkBA,EAClBW,UAAU,gBACVI,cAAe,cAAC,EAAD,CAAYS,WAAYA,SA7D/CY,IAAOe,WAAW,CAChBC,UAAW,SAAUC,GACnB,OAAOC,IAAKC,cAAcF,GAAMlC,OAElCqC,QAAQ,IA+DVC,IAASC,OAAO,cAACjC,EAAD,IAASkC,SAASC,eAAe,W","file":"static/js/main.e4c20902.chunk.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction ResizeButton(props) {\n  const onClick = (event) => {\n    props.changeVisibility(event);\n    props.changeWindowSize();\n  };\n\n  return (\n    <button onClick={onClick} className=\"resizeButton\">\n      <FontAwesomeIcon icon={props.icon} />\n    </button>\n  );\n}\n\nexport default ResizeButton;\n","import { useState } from \"react\";\nimport {\n  faExpandArrowsAlt,\n  faCompressArrowsAlt,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport ResizeButton from \"./ResizeButton\";\n\nfunction Window(props) {\n  const [windowSizeIsSmall, setWindowSize] = useState(true);\n\n  function changeWindowSize() {\n    setWindowSize(!windowSizeIsSmall);\n  }\n\n  return (\n    <div className={props.className} id={props.id} ref={props.requestingWindow}>\n      <div className=\"title-bar\">\n        <p>{props.titleName}</p>\n        <ResizeButton\n          changeVisibility={props.changeVisibility}\n          showPath={props.showPath}\n          icon={windowSizeIsSmall ? faExpandArrowsAlt : faCompressArrowsAlt}\n          changeWindowSize={changeWindowSize}\n        />\n      </div>\n      <div className=\"windowContent\">{props.windowContent}</div>\n    </div>\n  );\n}\n\nexport default Window;\n","function InputArea(props) {\n  return (\n    <textarea\n      id=\"editor\"\n      className=\"inputArea inner-window-area\"\n      onChange={props.handleInput}\n      value={props.input}\n    ></textarea>\n  );\n}\n\nexport default InputArea;\n","function MarkedArea(props) {\n  return (\n    <div\n      id=\"preview\"\n      className=\"markedArea inner-window-area\"\n      dangerouslySetInnerHTML={{ __html: props.markedText }}\n    ></div>\n  );\n}\n\nexport default MarkedArea;\n","export default __webpack_public_path__ + \"static/media/initialMarked.829eb3ae.md\";","import React, { useEffect, useState, useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport marked from \"marked\";\nimport DOMPurify from \"dompurify\";\nimport \"./index.css\";\nimport Window from \"./Window\";\nimport InputArea from \"./InputArea\";\nimport MarkedArea from \"./MarkedArea\";\nimport file from \"./initialMarked.md\";\nimport hljs from \"highlight.js\";\nimport \"highlight.js/styles/default.css\";\n\nmarked.setOptions({\n  highlight: function (code) {\n    return hljs.highlightAuto(code).value;\n  },\n  breaks: true,\n});\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [markedText, setMarkedText] = useState(null);\n  const [windowClassName, setWindowClassName] = useState(\"window\");\n  const [visibility, setVisibility] = useState(true);\n\n  const requestingWindow = useRef(null);\n\n  function handleInput(event) {\n    setInput(event.target.value);\n    markText(event.target.value);\n  }\n\n  function markText(text) {\n    const dirtyInput = marked(text);\n    const cleanedInput = DOMPurify.sanitize(dirtyInput);\n    setMarkedText(cleanedInput);\n  }\n\n  const changeVisibility = (event) => {\n    setVisibility(!visibility);\n    requestingWindow.current = event.currentTarget.parentNode.parentNode;\n    console.log(requestingWindow.current);\n    setWindowClassName(visibility ? \"invisible\" : \"window\");\n  };\n\n  useEffect(() => {\n    fetch(file)\n      .then((result) => result.text())\n      .then((text) => {\n        setInput(text);\n        markText(text);\n      });\n  }, []);\n\n  useEffect(() => {\n    console.log(requestingWindow.current.id);\n    if (!visibility) requestingWindow.current.className = \"bigger-window\";\n  }, [visibility]);\n\n  return (\n    <div className=\"content-box\">\n      <Window\n        requestingWindow={requestingWindow}\n        className={windowClassName}\n        changeVisibility={changeVisibility}\n        titleName=\"Text to be marked\"\n        windowContent={<InputArea input={input} handleInput={handleInput} />}\n      />\n      <Window\n        requestingWindow={requestingWindow}\n        className={windowClassName}\n        changeVisibility={changeVisibility}\n        titleName=\"Marked result\"\n        windowContent={<MarkedArea markedText={markedText} />}\n      />\n    </div>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}