{"version":3,"sources":["ResizeButton.js","Window.js","InputArea.js","MarkedArea.js","initialMarked.md","index.js"],"names":["ResizeButton","props","onClick","changeVisibility","changeWindowSize","className","icon","Window","useState","windowSizeIsSmall","setWindowSize","requestingWindow","useRef","id","ref","titleName","showPath","faExpandArrowsAlt","faCompressArrowsAlt","setRequestingWindow","windowContent","InputArea","onChange","handleInput","value","input","MarkedArea","dangerouslySetInnerHTML","__html","markedText","App","setInput","setMarkedText","windowClassName","setWindowClassName","visibility","setVisibility","markText","text","dirtyInput","marked","cleanedInput","DOMPurify","sanitize","object","current","useEffect","fetch","file","then","result","event","target","setOptions","highlight","code","hljs","highlightAuto","breaks","ReactDOM","render","document","getElementById"],"mappings":"gQAeeA,MAbf,SAAsBC,GAMpB,OACE,wBAAQC,QANM,WACdD,EAAME,mBACNF,EAAMG,oBAIoBC,UAAU,eAApC,SACE,cAAC,IAAD,CAAiBC,KAAML,EAAMK,UCuBpBC,MA1Bf,SAAgBN,GACd,MAA2CO,oBAAS,GAApD,mBAAOC,EAAP,KAA0BC,EAA1B,KAEMC,EAAmBC,mBAOzB,OACE,sBAAKP,UAAWJ,EAAMI,UAAWQ,GAAIZ,EAAMY,GAAIC,IAAKH,EAApD,UACE,sBAAKN,UAAU,YAAf,UACE,4BAAIJ,EAAMc,YACV,cAAC,EAAD,CACEZ,iBAAkBF,EAAME,iBACxBa,SAAUf,EAAMe,SAChBV,KAAMG,EAAoBQ,IAAoBC,IAC9Cd,iBAbR,WACEM,GAAeD,GACfR,EAAMkB,oBAAoBR,SAcxB,qBAAKN,UAAU,gBAAf,SAAgCJ,EAAMmB,oBCjB7BC,MAXf,SAAmBpB,GACjB,OACE,0BACEY,GAAG,SACHR,UAAU,8BACViB,SAAUrB,EAAMsB,YAChBC,MAAOvB,EAAMwB,SCIJC,MAVf,SAAoBzB,GAClB,OACE,qBACEY,GAAG,UACHR,UAAU,+BACVsB,wBAAyB,CAAEC,OAAQ3B,EAAM4B,eCLhC,MAA0B,yC,wBCmBzC,SAASC,IACP,MAA0BtB,mBAAS,IAAnC,mBAAOiB,EAAP,KAAcM,EAAd,KACA,EAAoCvB,mBAAS,MAA7C,mBAAOqB,EAAP,KAAmBG,EAAnB,KACA,EAA8CxB,mBAAS,UAAvD,mBAAOyB,EAAP,KAAwBC,EAAxB,KACA,EAAoC1B,oBAAS,GAA7C,mBAAO2B,EAAP,KAAmBC,EAAnB,KAEMzB,EAAmBC,iBAAO,MAOhC,SAASyB,EAASC,GAChB,IAAMC,EAAaC,IAAOF,GACpBG,EAAeC,IAAUC,SAASJ,GACxCP,EAAcS,GAGhB,IAAMtC,EAAmB,WACvBiC,GAAeD,GACfD,EAAmBC,EAAa,YAAc,WAG1ChB,EAAsB,SAACyB,GAC3BjC,EAAiBkC,QAAUD,EAAOC,SAgBpC,OAbAC,qBAAU,WACRC,MAAMC,GACHC,MAAK,SAACC,GAAD,OAAYA,EAAOZ,UACxBW,MAAK,SAACX,GACLP,EAASO,GACTD,EAASC,QAEZ,IAEHQ,qBAAU,WACHX,IAAYxB,EAAiBkC,QAAQxC,UAAY,mBACrD,CAAC8B,IAGF,sBAAK9B,UAAU,cAAf,UACE,cAAC,EAAD,CACEc,oBAAqBA,EACrBd,UAAW4B,EACX9B,iBAAkBA,EAClBY,UAAU,oBACVK,cAAe,cAAC,EAAD,CAAWK,MAAOA,EAAOF,YAxC9C,SAAqB4B,GACnBpB,EAASoB,EAAMC,OAAO5B,OACtBa,EAASc,EAAMC,OAAO5B,YAwCpB,cAAC,EAAD,CACEL,oBAAqBA,EACrBd,UAAW4B,EACX9B,iBAAkBA,EAClBY,UAAU,gBACVK,cAAe,cAAC,EAAD,CAAYS,WAAYA,SA9D/CW,IAAOa,WAAW,CAChBC,UAAW,SAAUC,GACnB,OAAOC,IAAKC,cAAcF,GAAM/B,OAElCkC,QAAQ,IAgEVC,IAASC,OAAO,cAAC9B,EAAD,IAAS+B,SAASC,eAAe,W","file":"static/js/main.d5819e0b.chunk.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction ResizeButton(props) {\n  const onClick = () => {\n    props.changeVisibility();\n    props.changeWindowSize();\n  };\n\n  return (\n    <button onClick={onClick} className=\"resizeButton\">\n      <FontAwesomeIcon icon={props.icon} />\n    </button>\n  );\n}\n\nexport default ResizeButton;\n","import { useState, useRef } from \"react\";\nimport {\n  faExpandArrowsAlt,\n  faCompressArrowsAlt,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport ResizeButton from \"./ResizeButton\";\n\nfunction Window(props) {\n  const [windowSizeIsSmall, setWindowSize] = useState(true);\n\n  const requestingWindow = useRef();\n\n  function changeWindowSize() {\n    setWindowSize(!windowSizeIsSmall);\n    props.setRequestingWindow(requestingWindow);\n  }\n\n  return (\n    <div className={props.className} id={props.id} ref={requestingWindow}>\n      <div className=\"title-bar\">\n        <p>{props.titleName}</p>\n        <ResizeButton\n          changeVisibility={props.changeVisibility}\n          showPath={props.showPath}\n          icon={windowSizeIsSmall ? faExpandArrowsAlt : faCompressArrowsAlt}\n          changeWindowSize={changeWindowSize}\n        />\n      </div>\n      <div className=\"windowContent\">{props.windowContent}</div>\n    </div>\n  );\n}\n\nexport default Window;\n","function InputArea(props) {\n  return (\n    <textarea\n      id=\"editor\"\n      className=\"inputArea inner-window-area\"\n      onChange={props.handleInput}\n      value={props.input}\n    ></textarea>\n  );\n}\n\nexport default InputArea;\n","function MarkedArea(props) {\n  return (\n    <div\n      id=\"preview\"\n      className=\"markedArea inner-window-area\"\n      dangerouslySetInnerHTML={{ __html: props.markedText }}\n    ></div>\n  );\n}\n\nexport default MarkedArea;\n","export default __webpack_public_path__ + \"static/media/initialMarked.829eb3ae.md\";","import React, { useEffect, useState, useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport marked from \"marked\";\nimport DOMPurify from \"dompurify\";\nimport \"./index.css\";\nimport Window from \"./Window\";\nimport InputArea from \"./InputArea\";\nimport MarkedArea from \"./MarkedArea\";\nimport file from \"./initialMarked.md\";\nimport hljs from \"highlight.js\";\nimport \"highlight.js/styles/default.css\";\n\nmarked.setOptions({\n  highlight: function (code) {\n    return hljs.highlightAuto(code).value;\n  },\n  breaks: true,\n});\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [markedText, setMarkedText] = useState(null);\n  const [windowClassName, setWindowClassName] = useState(\"window\");\n  const [visibility, setVisibility] = useState(true);\n\n  const requestingWindow = useRef(null);\n\n  function handleInput(event) {\n    setInput(event.target.value);\n    markText(event.target.value);\n  }\n\n  function markText(text) {\n    const dirtyInput = marked(text);\n    const cleanedInput = DOMPurify.sanitize(dirtyInput);\n    setMarkedText(cleanedInput);\n  }\n\n  const changeVisibility = () => {\n    setVisibility(!visibility);\n    setWindowClassName(visibility ? \"invisible\" : \"window\");\n  };\n\n  const setRequestingWindow = (object) => {\n    requestingWindow.current = object.current;\n  };\n\n  useEffect(() => {\n    fetch(file)\n      .then((result) => result.text())\n      .then((text) => {\n        setInput(text);\n        markText(text);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (!visibility) requestingWindow.current.className = \"bigger-window\";\n  }, [visibility]);\n\n  return (\n    <div className=\"content-box\">\n      <Window\n        setRequestingWindow={setRequestingWindow}\n        className={windowClassName}\n        changeVisibility={changeVisibility}\n        titleName=\"Text to be marked\"\n        windowContent={<InputArea input={input} handleInput={handleInput} />}\n      />\n      <Window\n        setRequestingWindow={setRequestingWindow}\n        className={windowClassName}\n        changeVisibility={changeVisibility}\n        titleName=\"Marked result\"\n        windowContent={<MarkedArea markedText={markedText} />}\n      />\n    </div>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}